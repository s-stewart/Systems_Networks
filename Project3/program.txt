Swap RS2 for IMM bit 24
Swap RS1 for PC bit 25
Use RD bits as SR2 register number bit 26
Unused for alignment bit 27
Instruction changes control flow bit 28
Instruction uses memory bit 29
ALU operation bit 31, 30


00: 0000 0011 1110 0000 1010 0000 0000 0000		03e00029	//ldadr $14,init14=0x2A=0x29+0x01   $14=2a
01: 1100 0001 1110 1110 0000 0000 0000 0000		c1ee0000	//lw $14, 0($14)  				    $14 = a0000
02: 0000 0011 0001 0000 0000 0000 0000 1000		03100008	//ldadr $a0=1, BASE=0x03+0x08=0x0B	$1=0B
03: 1100 0001 0001 0001 0000 0000 0000 0000		c1110000	//lw $a0=1, 0($a0=1)				$1=2
04: 0000 0011 0010 0000 0000 0000 0000 0111		03200007	//ldadr $a1=2, EXP= 0x05+0x07=0x0C	$2=0C
05: 1100 0001 0010 0010 0000 0000 0000 0000		c1220000	//lw $a1=2, 0($a1=2)				$2=0x10
06: 0000 0011 0001 0000 0000 0000 0000 0111		03300007	//ldadr $3, POW=0x07+0x07=0x0E		$3=0E
07: 0000 1110 0001 1111 0000 0000 0000 0000		0e3f0000	//jalr $3, $15						pc=0x0E	$15=0x08
08:	0000 0011 0001 0000 0000 0000 0000 0100		03100004	//ldadr $a0=1, ANS=0x09+0x04=0x0D	$1=0x0D
09: 0010 0100 1010 0001 0000 0000 0000 0000		24a10000	//sw $v0=10, 0($a0=1)				M[$1]=$10

0A: 											ff000000	//halt

0B: 2											00000002	//BASE
0C: 16											00000010	//EXP
0D: 0											00000000	//ANS

POW: 
0E: 0000 0001 1110 1110 0000 0000 0000 0010		01ee0002	//addi $14,$14,2					$14=a0002
0F: 0010 0100 1111 1110 1111 1111 1111 1111		24feffff	//sw $15, -1($14)					M[a0001]=0x08
10:	0010 0100 0001 1110 1111 1111 1111 1110	 	241efffe	//sw $a0=1, -2($14)					M[a0000]=0x02
11: 0101 0100 0000 0010 0000 0000 0000 1011		5402000b	//beq $zero, $a1=2, RET1=0x0B+0x12=0x1D  
12: 0101 0100 0000 0001 0000 0000 0000 1101		5401000d	//beq $zero, $a0=1, RET0=0x0D+0x13
13: 0000 0001 0010 0010 1111 1111 1111 1111		0122ffff	//addi $a1=2, $a1=2, -1				$2=16-1=15
14: 0000 0001 0001 0000 0000 0000 0001 1110		0130000e	//addi $3, $zero, POW=0x0E			$3=0+14
15:	0000 1110 0001 1111 0000 0000 0000 0000		0e3f0000	//jalr $3, $15  					PC=14, $15=PC+1=0x16
16: 0000 0000 0001 1010 0000 0000 0000 0000		001a0000 	//add $a0=1, $v0=10, $zero			
17: 1100 0001 0010 1110 1111 1111 1111 1110		c12efffe	//lw $a1=2, -2($14) 
18: 0000 0001 0001 0000 0000 0000 0010 0011		01300023	//addi $3, $zero, MULT0 x23
19: 0000 1110 0001 1111 0000 0000 0000 0000		0e3f0000	//jalr $3, $15
1A: 1100 0001 1111 1110 1111 1111 1111 1111		c1feffff	//lw $15, -1($14)
1B: 0000 0001 1110 1110 1111 1111 1111 1110		01eefffe	//addi $14, $14, -2 
1C: 0000 1110 1111 0000 0000 0000 0000 0000		0ef00000	//jalr $15, $zero
1D: 0000 0001 1010 0000 0000 0000 0000 0001		01a00001	//RET1: addi $v0=10, $zero, 1		$10++
1E:	0000 0001 1110 1110 1111 1111 1111 1110		01eefffe	//addi $14, $14, -2					$14-2
1F: 0000 1110 1111 0000 0000 0000 0000 0000		0ef00000	//jalr $15, $zero
20: 0000 0000 1010 0000 0000 0000 0000 0000 	00a00000	//RET0: add $v0=10, $zero, $zero
21: 0000 0001 1110 1110 1111 1111 1111 1110		01eefffe	//addi $14, $14, -2
22: 0000 1110 1111 0000 0000 0000 0000 0000	 	0ef00000	//jalr $15, $zero

23: 0000 0000 1010 0000 0000 0000 0000 0000		00a00000	//MULT: add $v0=10, $zero, $zero
24: 0000 0000 1010 1010 0001 0000 0000 0000		00aa1000	//AGAIN: add $v0=10,$v0=10, $a0=1
25: 1000 0000 0011 0000 0000 0000 0000 0000		80400000 	//nand $a2=4, $zero, $zero			$4=-1
26: 0000 0000 0010 0010 0011 0000 0000 0000		00224000	//add $a1=2, $a1=2, $a2=4			$2=$2-1
27: 0101 0100 0010 0000 0000 0000 0000 0000		54200001	//beq $a1=2, $zero, DONE        0x01
28: 0101 0100 0000 0000 0000 0000 1111 1011		5400fffb	//beq $zero, $zero, AGAIN     0xFB (-5)
29: 0000 1110 1111 0000 0000 0000 0000 0000		0ef00000	//DONE: jalr $15, $zero 

2A: 0000 0000 0000 0000 1010 0000 0000 0000 	0000a0000 	//init14